import streamlit as st 
import numpy as np
import matplotlib.pyplot as plt
import time

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Desintegraci√≥n Radiactiva - Fracci√≥n vs Periodos")

st.title("üìâ Desintegraci√≥n Radiactiva: Acumulaci√≥n o Desintegraci√≥n")

# Selecci√≥n de tipo de simulaci√≥n
modo = st.radio("Selecciona el tipo de simulaci√≥n:", ["Acumulaci√≥n", "Desintegraci√≥n"])

# Entradas del usuario
num_periodos = st.slider("N√∫mero de periodos a simular", min_value=1, max_value=30, value=10)
dt = st.slider("Paso entre puntos (en periodos)", min_value=0.1, max_value=5.0, value=1.0)

# Par√°metro constante
lambda_ln2 = np.log(2)  # ln(2)

# Inicializar listas para graficar
datos_n = []
datos_frac = []

# Contenedor para la gr√°fica
grafico = st.empty()

# Simulaci√≥n
n = 0.0
while n <= num_periodos:
    if modo == "Acumulaci√≥n":
        N_frac = 1 - np.exp(-lambda_ln2 * n)
    else:  # Desintegraci√≥n
        N_frac = np.exp(-lambda_ln2 * n)

    datos_n.append(n)
    datos_frac.append(N_frac)

    # Graficar con escala fija
    fig, ax = plt.subplots()
    ax.plot(datos_n, datos_frac, color='green', marker='o', linestyle='-')
    ax.set_xlim(0, num_periodos)
    ax.set_ylim(0, 1.05)
    ax.set_xlabel("N√∫mero de periodos")
    ax.set_ylabel("Fracci√≥n acumulada" if modo == "Acumulaci√≥n" else "Fracci√≥n remanente")
    ax.set_title(f"Simulaci√≥n de {modo}")
    ax.grid(True)
    grafico.pyplot(fig)

    n += dt
    time.sleep(1)

# Mostrar f√≥rmula final
if modo == "Acumulaci√≥n":
    st.latex(r"1 - e^{-\ln(2) \cdot \frac{t}{t_{1/2}}}")
else:
    st.latex(r"e^{-\ln(2) \cdot \frac{t}{t_{1/2}}}")

st.markdown("Donde:")
st.markdown("- \( N_0 \): n√∫mero inicial de n√∫cleos")
st.markdown("- \( t_{1/2} \): vida media")
st.markdown("- \( n = t / t_{1/2} \): n√∫mero de periodos")

st.success("‚úÖ Simulaci√≥n completada.")
